class router_wbase_seq extends uvm_sequence #(write_xtn);

	`uvm_object_utils(router_wbase_seq)
	
  	int i;
    
  	extern function new(string name ="router_wbase_seq");
		
endclass

function router_wbase_seq::new(string name ="router_wbase_seq");
	
  	super.new(name);
  
endfunction

      
class router_3_addr_seq extends router_wbase_seq;
  
  `uvm_object_utils(router_3_addr_seq)
  
  extern function new(string name ="router_3_addr_seq");
  extern task body();
    
endclass
      
function router_3_addr_seq::new(string name ="router_3_addr_seq");

  	super.new(name);
    
endfunction
      
task router_3_addr_seq::body();
	repeat(3)
		begin
	   		req=write_xtn::type_id::create("req");
          
	  	    start_item(req);
          
            assert(req.randomize() with{header[1:0]==i;header[7:2]==5;});
          
            `uvm_info("ROUTER_WR_SEQUENCE",$sformatf("Printing from write sequence at time %0t \n %s",$time,req.sprint()),UVM_LOW) 

		    finish_item(req);
          
            i++;
		end
	
	
endtask

class router_14_pkt_seq extends router_wbase_seq;
	
  	`uvm_object_utils(router_14_pkt_seq)
  
  	extern function new(string name ="router_14_pkt_seq");
  	extern task body();
    
endclass
      
    function router_14_pkt_seq::new(string name ="router_14_pkt_seq");
    	
      	super.new(name);
    
    endfunction
    
task router_14_pkt_seq :: body();
      
	begin
 	    
       	req=write_xtn::type_id::create("req");
       
        start_item(req);
       
        assert(req.randomize() with{header[7:2]==14;});
      
        `uvm_info("ROUTER_WR_SEQUENCE",$sformatf("Printing from write sequence at time %0t \n %s",$time,req.sprint()),UVM_LOW)
      
        finish_item(req);
        
    end
  
endtask
      
