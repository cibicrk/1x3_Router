class router_rd_monitor extends uvm_monitor;


	`uvm_component_utils(router_rd_monitor)
   	virtual router_if.RMON_MP vif;

	router_rd_agent_config m_cfg;

  	uvm_analysis_port #(read_xtn) monitor_port;

	extern function new(string name = "router_rd_monitor", uvm_component parent);
	extern function void build_phase(uvm_phase phase);
	extern function void connect_phase(uvm_phase phase);
	extern task run_phase(uvm_phase phase);
	extern task collect_data();
	extern function void report_phase(uvm_phase phase);

endclass

//-----------------  constructor new method  -------------------//
function router_rd_monitor::new(string name = "router_rd_monitor", uvm_component parent);
	
  	super.new(name,parent);
		// create object for handle monitor_port using new
 	monitor_port = new("monitor_port", this);

endfunction

function void router_rd_monitor::build_phase(uvm_phase phase);
	// call super.build_phase(phase);
    super.build_phase(phase);
	// get the config object using uvm_config_db 
	if(!uvm_config_db #(router_rd_agent_config)::get(this,"","set_from_rd_agt_top",m_cfg))
	`uvm_fatal("CONFIG","cannot get() m_cfg from uvm_config_db. Have you set() it?") 
		
endfunction

function void router_rd_monitor::connect_phase(uvm_phase phase);
    vif = m_cfg.vif;
endfunction

task router_rd_monitor::run_phase(uvm_phase phase);
    forever
    	collect_data();    
             
endtask


task router_rd_monitor::collect_data();

	read_xtn data_rcv;
	data_rcv= read_xtn::type_id::create("data_rcv");

	wait(vif.RD_MON_CB.read_enb)
			@(vif.RD_MON_CB);
	        data_rcv.header = vif.RD_MON_CB.data_out;
 
			data_rcv.payload=new[data_rcv.header[7:2]];
			
			@(vif.RD_MON_CB);

	foreach(data_rcv.payload[i])
		begin
	
			data_rcv.payload[i]=vif.RD_MON_CB.data_out;

			@(vif.RD_MON_CB);

		end

   	data_rcv.parity = vif.RD_MON_CB.data_out;    
		`uvm_info("ROUTER_RD_MONITOR",$sformatf("Printing from router read monitor at time %0d \n %s",$time,data_rcv.sprint()),UVM_LOW)

	monitor_port.write(data_rcv);
          
    $display("Read data send to sb at time %0t",$time);
       
  	m_cfg.mon_rcvd_xtn_cnt++;
           
    @(vif.RD_MON_CB);

endtask

function void router_rd_monitor::report_phase(uvm_phase phase);
   	`uvm_info(get_type_name(), $sformatf("Report: Router Read Monitor Collected %0d Transactions", m_cfg.mon_rcvd_xtn_cnt), UVM_LOW)
endfunction 
