class router_wr_driver extends uvm_driver #(write_xtn);

	`uvm_component_utils(router_wr_driver)

	virtual router_if.WDR_MP vif;

	router_wr_agent_config m_cfg;

	extern function new(string name ="router_wr_driver",uvm_component parent);
	extern function void build_phase(uvm_phase phase);
	extern function void connect_phase(uvm_phase phase);
	extern task run_phase(uvm_phase phase);
	extern task send_to_dut(write_xtn xtn);
	extern function void report_phase(uvm_phase phase);
	extern task reset_task;
      
endclass


function router_wr_driver::new(string name ="router_wr_driver",uvm_component parent);

	super.new(name,parent);

endfunction

function void router_wr_driver::build_phase(uvm_phase phase);
      
		super.build_phase(phase);
	
		if(!uvm_config_db #(router_wr_agent_config)::get(this,"","set_from_wr_agt_top",m_cfg))
			`uvm_fatal("CONFIG","cannot get() m_cfg from uvm_config_db. Have you set() it?") 

endfunction


function void router_wr_driver::connect_phase(uvm_phase phase);
  
	vif=m_cfg.vif;
  
endfunction

task router_wr_driver::reset_task;

  begin

      	@(vif.WR_DRV_CB)
		vif.WR_DRV_CB.resetn<=1'b0;
		@(vif.WR_DRV_CB)
		vif.WR_DRV_CB.resetn<=1'b1;

		
	end
  
endtask

task router_wr_driver::run_phase(uvm_phase phase);
	
  	reset_task;

	forever 
		begin		
       
			seq_item_port.get_next_item(req);
			send_to_dut(req);
			seq_item_port.item_done();
          
		end
  
endtask


task router_wr_driver::send_to_dut(write_xtn xtn);

	begin
	
    	wait(!vif.WR_DRV_CB.busy)

	    //header Driving
	
		vif.WR_DRV_CB.pkt_valid<=1'b1;

		vif.WR_DRV_CB.data_in<=xtn.header;

		@(vif.WR_DRV_CB);
      
		foreach(xtn.payload[i])
			begin
	
    			wait(!vif.WR_DRV_CB.busy)
		
				vif.WR_DRV_CB.data_in<=xtn.payload[i];
              
          		@(vif.WR_DRV_CB);
	
			end
		
		wait(!vif.WR_DRV_CB.busy)

			vif.WR_DRV_CB.pkt_valid<=1'b0;
			vif.WR_DRV_CB.data_in<=xtn.parity;
		
	end
    
  	m_cfg.drv_data_sent_cnt++;
  
  	`uvm_info("ROUTER_WR_DRIVER",$sformatf("Printing from router write driver at time %0t \n %s",$time,xtn.sprint()),UVM_LOW)
  
     @(vif.WR_DRV_CB);
endtask

  function void router_wr_driver::report_phase(uvm_phase phase);
    
    	`uvm_info(get_type_name(), $sformatf("Report: Router write driver sent %0d transactions", m_cfg.drv_data_sent_cnt), UVM_LOW)
    
  endfunction
