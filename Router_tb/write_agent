class router_wr_agnt extends uvm_agent;

	`uvm_component_utils(router_wr_agnt)

	
	router_wr_agent_config m_cfg;


	router_wr_monitor wr_mon;
	router_wr_sequencer wr_seqrh;
	router_wr_driver wr_drv;


    extern function new(string name = "router_wr_agnt", uvm_component parent = null);
    extern function void build_phase(uvm_phase phase);
	extern function void connect_phase(uvm_phase phase);

endclass

function router_wr_agnt::new(string name = "router_wr_agnt", 
                                    
		uvm_component parent = null);
        super.new(name, parent);

endfunction
     
  
//-----------------  build() phase method  -------------------//
      
         // Call parent build phase
         // Create router_wr_monitor instance
         // If is_active=UVM_ACTIVE, create router_wr_driver and router_wr_sequencer instances
      
function void router_wr_agnt::build_phase(uvm_phase phase);
		super.build_phase(phase);
                // get the config object using uvm_config_db 
  
	  	if(!uvm_config_db #(router_wr_agent_config)::get(this,"","set_from_wr_agt_top",m_cfg))
			`uvm_fatal("CONFIG","cannot get() m_cfg from uvm_config_db. Have you set() it?") 
	        
        wr_mon=router_wr_monitor::type_id::create("wr_mon",this);	
		
  		if(m_cfg.is_active==UVM_ACTIVE)
			begin
              
				wr_drv=router_wr_driver::type_id::create("wr_drv",this);
				wr_seqrh=router_wr_sequencer::type_id::create("wr_seqrh",this);
              
			end
	
endfunction

      
//-----------------  connect() phase method  -------------------//
	//If is_active=UVM_ACTIVE, 
    //connect driver(TLM seq_item_port) and sequencer(TLM seq_item_export)
      
function void router_wr_agnt::connect_phase(uvm_phase phase);
		if(m_cfg.is_active==UVM_ACTIVE)
			begin
				wr_drv.seq_item_port.connect(wr_seqrh.seq_item_export);
  			end
endfunction
