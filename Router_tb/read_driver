class router_rd_driver extends uvm_driver #(read_xtn);

`uvm_component_utils(router_rd_driver)

virtual router_if.RDR_MP vif;

router_rd_agent_config m_cfg;

	extern function new(string name ="router_rd_driver",uvm_component parent);
	extern function void build_phase(uvm_phase phase);
	extern function void connect_phase(uvm_phase phase);
	extern task run_phase(uvm_phase phase);
	extern task send_to_dut(read_xtn xtn);
	extern function void report_phase(uvm_phase phase);
	
endclass


function router_rd_driver::new(string name ="router_rd_driver",uvm_component parent);

	super.new(name,parent);

endfunction

function void router_rd_driver::build_phase(uvm_phase phase);
      
        super.build_phase(phase);
	
	  if(!uvm_config_db #(router_rd_agent_config)::get(this,"","set_from_rd_agt_top",m_cfg))
		`uvm_fatal("CONFIG","cannot get() m_cfg from uvm_config_db. Have you set() it?") 


endfunction


function void router_rd_driver::connect_phase(uvm_phase phase);
vif=m_cfg.vif;
endfunction



task router_rd_driver::run_phase(uvm_phase phase);
		

      forever 
		begin			
			seq_item_port.get_next_item(req);
			send_to_dut(req);
			seq_item_port.item_done();
		end
endtask


task router_rd_driver::send_to_dut(read_xtn xtn);


 

fork
	begin :C1
	
		wait(vif.RD_DRV_CB.vld_out)

			repeat(xtn.count)
		
			@(vif.RD_DRV_CB); //header Driving
	
			vif.RD_DRV_CB.read_enb<=1'b1;

		wait(!vif.RD_DRV_CB.vld_out)
		
			vif.RD_DRV_CB.read_enb<=1'b0;
	end

	begin
		repeat(100)
		@(vif.RD_DRV_CB);
	end

join_any

  disable C1;
  `uvm_info("ROUTER_RD_DRIVER",$sformatf("Printing from router read driver at time %0d \n %s",$time,xtn.sprint()),UVM_LOW)
    m_cfg.drv_data_sent_cnt++;
endtask

  function void router_rd_driver::report_phase(uvm_phase phase);
    `uvm_info(get_type_name(), $sformatf("Report: ROUTER read driver sent %0d transactions", m_cfg.drv_data_sent_cnt), UVM_LOW)
  endfunction
