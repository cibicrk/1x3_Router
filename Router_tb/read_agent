class router_rd_agnt extends uvm_agent;

`uvm_component_utils(router_rd_agnt)


router_rd_agent_config m_cfg;


	router_rd_monitor rd_mon;
	router_rd_sequencer rd_seqrh;
	router_rd_driver rd_drv;


	extern function new(string name = "router_rd_agnt", uvm_component parent = null);
	extern function void build_phase(uvm_phase phase);
	extern function void connect_phase(uvm_phase phase);

endclass

function router_rd_agnt::new(string name = "router_rd_agnt",uvm_component parent = null);
        
	super.new(name, parent);
       
endfunction
     
  
//-----------------  build() phase method  -------------------//


function void router_rd_agnt::build_phase(uvm_phase phase);
	super.build_phase(phase);
                // get the config object using uvm_config_db 
	if(!uvm_config_db #(router_rd_agent_config)::get(this,"","set_from_rd_agt_top",m_cfg))
		`uvm_fatal("CONFIG","cannot get() m_cfg from uvm_config_db. Have you set() it?") 
	    
	rd_mon=router_rd_monitor::type_id::create("rd_mon",this);	
		
	if(m_cfg.is_active==UVM_ACTIVE)
	
		begin
			rd_drv=router_rd_driver::type_id::create("rd_drv",this);
			rd_seqrh=router_rd_sequencer::type_id::create("rd_seqrh",this);
		end
	
endfunction

      
//-----------------  connect() phase method  -------------------//
	//If is_active=UVM_ACTIVE, 
        //connect driver(TLM seq_item_port) and sequencer(TLM seq_item_export)
      
function void router_rd_agnt::connect_phase(uvm_phase phase);
		
  	if(m_cfg.is_active==UVM_ACTIVE)
		
	begin
		
       	rd_drv.seq_item_port.connect(rd_seqrh.seq_item_export);

    end

endfunction
