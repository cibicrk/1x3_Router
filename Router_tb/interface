interface router_if(input bit clock);
`define DATA_WIDTH =8;


bit clk;

assign clk=clock;
logic resetn;
logic pkt_valid;
logic read_enb;
logic [7:0] data_in;
logic [7:0] data_out;
logic busy;
logic err;
logic vld_out;




clocking WR_DRV_CB @(posedge clk);
	default input #1 output #1;
	input busy;
	output data_in;
	output pkt_valid;
	output resetn;
endclocking

clocking WR_MON_CB @(posedge clk);
	default input #1 output #1;
	input data_in;
	input pkt_valid;
	input resetn;
	input busy;
	input err;
endclocking

clocking RD_DRV_CB @(posedge clk);
	default input #1 output #1;
	output read_enb;
	input vld_out; 
endclocking

clocking RD_MON_CB @(posedge clk);
	default input #1 output #1;
	input data_out;
	input read_enb;
	input vld_out;
endclocking

modport DUV_ROUTER (input clk,resetn,pkt_valid,read_enb,data_in, output busy,err,data_out,vld_out);
//write driver modport
modport WDR_MP(clocking WR_DRV_CB);
//read driver modport
modport RDR_MP(clocking RD_DRV_CB);
//write monitor modport
modport WMON_MP(clocking WR_MON_CB);
//read monitor modport
modport RMON_MP(clocking RD_MON_CB);

endinterface
